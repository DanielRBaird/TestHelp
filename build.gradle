/*
 * Copyright (C) 2018 Touchlab, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
        google()
        gradlePluginPortal()
//        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$KOTLIN_VERSION"
    }
}

apply plugin: 'org.jetbrains.kotlin.multiplatform'

repositories {
    mavenCentral()
//    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
}

group = GROUP
version = VERSION_NAME

kotlin {
    targets {
//            macosX64("nativeCommon")
        jvm()
    js()
        macosX64()
        iosArm32()
        iosArm64()
        iosX64()
        linuxX64()
        watchosArm32()
        watchosArm64()
        watchosX86()
        tvosArm64()
        tvosX64()
        linuxArm32Hfp()
        linuxMips32()
//    androidNativeArm32()
//    androidNativeArm64()
        mingwX64()

//        fromPreset(presets.jvm, 'jvm')

//                fromPreset(presets.macosX64, 'nativeCommon')

//        fromPreset(presets.macosX64, 'macos')
//        fromPreset(presets.iosX64, 'iosX64')
//        fromPreset(presets.iosArm64, 'iosArm64')
//        fromPreset(presets.iosArm32, 'iosArm32')
//        fromPreset(presets.mingwX64, 'mingw')
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
            }
        }
        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }
        jvmMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
            }
        }
        jvmTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }

        //Disabling js till we sort out some testing
        jsMain {
            dependsOn commonMain
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'
            }
        }
        jsTest {
            dependsOn commonTest
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-js'
            }
        }

        nativeCommonMain { }
        nativeCommonTest { }

        configure([targets.iosX64,
                   targets.iosArm32,
                   targets.iosArm64,
                   targets.macosX64,
                   targets.mingwX64,
                   targets.watchosArm32,
                   targets.watchosArm64,
                   targets.watchosX86,
                   targets.tvosArm64,
                   targets.tvosX64,
                   targets.linuxX64,
                   targets.linuxArm32Hfp,
                   targets.linuxMips32
//                   ,
//                   targets.androidNativeArm32,
//                   targets.androidNativeArm64
        ]) {
            compilations.main.source(sourceSets.nativeCommonMain)
            compilations.test.source(sourceSets.nativeCommonTest)
        }
    }
}

configurations {
    compileClasspath
}

apply from: "$rootDir/gradle/gradle-mvn-mpp-push.gradle"
